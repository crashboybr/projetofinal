<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="Description" content="vLine Example">
  <!-- Always force latest IE rendering engine or request Chrome Frame -->
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">

  <title>Aula Com VC</title>

</head>
<body bgcolor="#000">
<style type="text/css">

#term-wrapper {
  padding: 0 1em; margin: 0;
  position: absolute;
  height: 100%;
  width: 50%;
}

#video-wrapper {
  position: absolute;
  height: 100%;
  width: 50%;
  right: 0;
}
#chat-message
{

    position: absolute;
    height: 50%;
    width: 50%;
    margin-top: 10%;

}
</style>

<div id="video-wrapper"></div>
<div id="waiting">
<img src="/logo21.png" style="float: left;" /><h1 style="color: #fff; text-align: center; font-family: verdana">Aguardando {{ remote_user.name }} se conectar...</h1>
</div>
<iframe src="http://www.twiddla.com/api/start.aspx?sessionid={{ class.whiteboardId }}&hide=chat,bottomtray,url&autostart=true&guestname={{ me.name }}" frameborder="0" width="600" height="400" style="border:solid 1px #555; display:none" id="whiteboard"></iframe>
<div id="chat-message" style="display:none;">
    <div id="messages"></div>
    <input id="msg" type="text" style="width: 70%"/> <input type="button" value="Enviar" onclick="enviarMsg()">
</div>

  <script src="https://static.vline.com/vline.js"></script>
  <script src="/js/jquery-1.10.1.min.js" defer="defer"></script>

  <script>
  var vlineClient =(function () {
    // Your server should generate a profile for the local user
    LOCAL_USER_PROFILE = {
      displayName: '{{ me.getName() }}'
    };
    AUTH_TOKEN      = '{{ vline.getJWT }}';   // Your server should generate and inject an authToken for the local user
    REMOTE_USER_ID  = '{{ remote_user.id }}'; // Your server should set the username of the remote user

    var serviceId   = 'bernardo';       // Set this to your Service ID (constant)

    var session     = null;
    var localPerson = null;
    var localStream = null;


    var client = vline.Client.create({serviceId: serviceId, ui: true, uiVideoPanel: 'video-wrapper'});
    client.on('add:mediaSession', onMediaSession, this);
    function onEnterConnecting() {
        app.showMessage('Conectando...');
    }
    function onMediaSession(e) {
        var mediaSession = e.target;
        mediaSession.on('enterState:incoming', onIncomingMedia);
        mediaSession.on('enterState:active', onEnterActive);
        //mediaSession.on('enterState:connecting', onEnterConnecting).
        //mediaSession.on('exitState:connecting', app.hideMessage, app).
        mediaSession.on('enterState:closed', function(e) {
            localStream && localStream.stop();
            //console.log("Acabou");
            {% if me.type == 'aluno' %}
                window.location = "{{ path('rating_new', {'teacher': remote_user.id, 'class': class.id}) }}";
            {% else %}
                window.location = "{{ path('aula_frontend_homepage') }}";
            {% endif %}
      });
    }

    

    // Auto-accept incoming call
    function onIncomingMedia(e) {
      var mediaSession = e.target;
      mediaSession.start();
    }


    // We log in with the auth token
    client.login(serviceId, LOCAL_USER_PROFILE, AUTH_TOKEN).done(function(sess) {
        session = sess;
        localPerson = session.getLocalPerson();
        console.log('Local person: ' + localPerson.getId());
        connect();
    });
    

    // Deterministically call other user, for example userA will always call userB as userA < userB
    function startPeerMediaSession(person) {
      if ((person.getId() != localPerson.getId()) && (person.getId() < localPerson.getId())) {
        if (person.getPresenceState() === 'online') {
          var m = person.startMedia();
          console.log('Started media session with person: ' + person.getId());
        }
      }
    }

    function onEnterActive() {
          $("#whiteboard").show();
          $("#chat-message").show();
          $("#waiting").hide();
          document.body.style.background = "#fff";
          //userIdMsg = person.getId();
    }

    

    function connect() {
      // See if other person is online and start call immediately.
      // The other person will auto accept
      session.getPerson(REMOTE_USER_ID).done(function(p) {

        // This shows a local video while you wait for the other user
        // to show up
        client.getLocalStream().done(function(s) {
          localStream = s;
          console.log('Local stream: ' + s.getId());
          // NOTE: If you want to layout the video elements in a custom manner, you can use
          // stream.createVideoElement() to create a video element here:
          // https://vline.com/developer/docs/vline.js/vline.MediaStream#createVideoElement
          //localStream.createVideoElement();
        }).fail(function (error) {
              console.log('error: ' + error.message + ' type: ' + error.type);
        });

        startPeerMediaSession(p);

        // If other person is not currently online, this will start the call when they come
        // online
        p.on('change:presenceState', function (e) {
          if (e.val === 'online') {
            console.log('User came online, starting mediasession with: ' + p.getId());
            startPeerMediaSession(p);
          }
        });
        function onIm(event) {
            var msg = event.message, sender = msg.getSender();
            // format message in the style of the unix write command
            //new Date(msg.getCreationTime()).toLocaleTimeString()
            $("#messages").append('<br />[' + sender.getDisplayName() + '] ' + msg.getBody(false));
        }
        p.on('recv:im', onIm, this);

      }, this);
    }

    // Remember to stop local stream and logout when you unload page.
    window.addEventListener('beforeunload', function (event) {
      localStream && localStream.stop();
      session && session.logout();
    });

    return client;
  })();
    var sessao = vlineClient.getDefaultSession();
    
    function enviarMsg()
    {
      //console.log(userIdMsg,sessao);
      //sessao.postMessage("bernardo:" + userIdMsg, $("#msg").val())
      sessao.postMessage('{{ remote_user.id }}', $("#msg").val());
      //$("#messages").append($("#msg").val());


      $("#messages").append('<br />[EU] ' + $("#msg").val());

      $("#msg").val('');
    }

</script>

</body>
</html>